{"version":3,"sources":["context/GlobalContext.js","components/Navbar.js","components/AddServicesButton.js","components/AddMoviesButton.js","reducers/moviesReducer.js","components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","DataContext","props","useState","services","setServices","isLoading","setIsLoading","isError","setIsError","useEffect","axios","get","then","response","data","catch","err","Provider","value","children","MyNavbar","expandMenu","setExpandMenu","useContext","movies","useSelector","state","Navbar","color","dark","expand","className","Container","NavbarBrand","href","length","NavbarText","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","AddServices","Button","style","marginBottom","namePrompt","prompt","update","id","Math","floor","random","title","desc","method","url","AddMovies","dispatch","useDispatch","type","payload","ActionAddMovie","ServicesList","moviesLoading","setMoviesLoading","moviesError","setMoviesError","delService","delete","process","resp","console","log","ListGroup","TransitionGroup","map","CSSTransition","key","timeout","classNames","ListGroupItem","size","filter","service","ActionDelMovie","App","Boolean","window","location","hostname","match","globalStore","createStore","action","movie","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.258bc90e.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const GlobalContext = createContext()\r\n\r\nexport const DataContext = props => {\r\n\tconst [services, setServices] = useState([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [isError, setIsError] = useState(false);\r\n\r\n\tuseEffect( () => {\r\n\t\taxios.get('https://learn-mern-stack-28.herokuapp.com/posts')\r\n\t\t\t.then( response => {setServices(response.data);setIsLoading(false)} )\r\n\t\t\t.catch(err => setIsError(true))\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\r\n\t\t<GlobalContext.Provider value={[services, setServices, isLoading, isError]}>\r\n\t\t\t{props.children}\r\n\t\t</GlobalContext.Provider>\r\n\r\n\t)\r\n}\r\n","import React, {useState, useContext} from 'react';\r\nimport {Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, NavbarText, Container} from 'reactstrap';\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport {useSelector} from 'react-redux';\r\n\r\n\r\nconst MyNavbar = props => {\r\n    const [expandMenu, setExpandMenu] = useState(false);\r\n    const [services] = useContext(GlobalContext);\r\n    const movies = useSelector(state => state)\r\n\r\n    const toggle = () => {\r\n        setExpandMenu(!expandMenu);\r\n    }\r\n\r\n    return (\r\n\t\t<div>\r\n\t\t\t<Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                <Container>\r\n                    <NavbarBrand href=\"/\"> DEVolution {services.length}-{movies.length} </NavbarBrand>\r\n                    <NavbarText>Dev Love Evolution</NavbarText>\r\n                    <NavbarToggler onClick={toggle} />\r\n                    <Collapse isOpen={expandMenu} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">\r\n                                    Contact\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">\r\n                                    Pricing\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink href=\"/\">\r\n                                    About\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Container>\r\n\t\t\t</Navbar>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default MyNavbar;","import React, { useContext } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport axios from 'axios';\r\n\r\nconst AddServices = () => {\r\n\tconst [services, setServices] = useContext(GlobalContext);\r\n\r\n\tconst addService = (data) => axios({\r\n\t\tmethod: 'post',\r\n\t\turl: 'https://learn-mern-stack-28.herokuapp.com/posts',\r\n\t\tdata: data})\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tcolor=\"dark\"\r\n\t\t\tstyle={{\r\n\t\t\t\tmarginBottom: \"2rem\"\r\n\t\t\t}}\r\n\t\t\tonClick={ () => {\r\n\t\t\t\tconst namePrompt = prompt(\"Enter what U want\");\r\n\t\t\t\tif (namePrompt) {\r\n\r\n\t\t\t\t\tconst update = {id : Math.floor(Math.random() * Math.floor(5000)), title:'pouvoir', desc: namePrompt};\r\n\r\n\t\t\t\t\taddService(update);\r\n\t\t\t\t\tsetServices([...services, update]);\r\n\r\n\t\t\t\t}\r\n\t\t\t}}>\r\n\t\t\tAjoutez un Service\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default AddServices;\r\n","import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport {ActionAddMovie} from '../reducers/moviesReducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst AddMovies = () => {\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst addMovie = (data) => axios({\r\n\t\tmethod: 'post',\r\n\t\turl: 'https://learn-mern-stack-28.herokuapp.com/posts',\r\n\t\tdata: data})\r\n\r\n\treturn (\r\n\t\t<Button\r\n\t\t\tcolor=\"dark\"\r\n\t\t\tstyle={{\r\n\t\t\t\tmarginBottom: \"2rem\"\r\n\t\t\t}}\r\n\t\t\tonClick={() => {\r\n\t\t\t\tconst namePrompt = prompt(\"Enter what U want\");\r\n\t\t\t\tif (namePrompt) {\r\n\r\n\t\t\t\t\tconst update = {id : Math.floor(Math.random() * Math.floor(5000)), title:'Vartago', desc: namePrompt};\r\n\t\t\t\t\t\r\n\t\t\t\t\taddMovie(update);\r\n\t\t\t\t\tdispatch(ActionAddMovie(update));\r\n\t\t\t\t}\r\n\t\t\t}}>\r\n\t\t\tAjouter un Film\r\n\t\t</Button>\r\n\t);\r\n};\r\n\r\nexport default AddMovies;\r\n","\r\nexport const ActionInitMovies = (data) => {\r\n    return {\r\n        type: 'INIT_MOVIES',\r\n        payload: data\r\n    }\r\n}\r\n\r\n\r\nexport const ActionAddMovie = (data) => {\r\n    return {\r\n        type: 'ADD_MOVIE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const ActionDelMovie = (id) => {\r\n    return {\r\n        type: 'DEL_MOVIE',\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport const moviesReducer = (state = [], action) => {\r\n        \r\n        switch (action.type) \r\n        {\r\n            case 'INIT_MOVIES' :\r\n                return action.payload;\r\n            case 'ADD_MOVIE' :\r\n                return [...state, action.payload];\r\n            case 'DEL_MOVIE' :\r\n                return state.filter(movie => movie.id !== action.payload);\r\n            default :\r\n                return state;\r\n        }\r\n}","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport AddServices from \"./AddServicesButton\";\r\nimport AddMovies from \"./AddMoviesButton\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {ActionDelMovie, ActionInitMovies} from '../reducers/moviesReducer';\r\nimport axios from 'axios';\r\n\r\n\r\nconst ServicesList = props => {\r\n\tconst [services, setServices, isLoading, isError] = useContext(GlobalContext);\r\n\tconst [moviesLoading, setMoviesLoading] = useState(true);\r\n\tconst [moviesError, setMoviesError] = useState(false);\r\n\tconst movies = useSelector(state => state)||[];\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect( () => {\r\n\t\t\r\n\t\taxios.get('https://learn-mern-stack-28.herokuapp.com/posts')\r\n\t\t\t.then( response => {dispatch(ActionInitMovies(response.data));setMoviesLoading(false)} )\r\n\t\t\t.catch(err => {setMoviesError(true);setMoviesLoading(false)})\r\n\t}, []);\r\n\r\n\tconst delService = (id) => axios.delete(process.env.PUBLIC_URL+`/posts/${id}`)\r\n\t.then(resp => console.log(resp));\r\n\r\n\treturn (\r\n\r\n\t<div>\r\n\t\t<Container style={{marginBottom: '2rem'}}>\r\n\t\t<AddServices></AddServices>\r\n\t\t\t<ListGroup>{isLoading ? (<p> Data is loading... </p>) : ( isError ? (<p> Sorry we did not found the data</p>) : (\r\n\t\t\t\t<TransitionGroup className=\"services-list\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t{services.map(({ id, title, desc }) => (\r\n\t\t\t\t\t\t<CSSTransition key={id} timeout={500} classNames=\"fade\">\r\n\t\t\t\t\t\t\t<ListGroupItem className=\"list\">\r\n\t\t\t\t\t\t\t\t{desc}\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tclassName={'remove-btn'+id}\r\n\t\t\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tdelService(id);\r\n\t\t\t\t\t\t\t\t\t\tsetServices(services.filter(service => service.id !== id))\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tX\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t\r\n\t\t\t\t</TransitionGroup>))}\r\n\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t\t\r\n\t\t<Container>\r\n\t\t\t<AddMovies></AddMovies>\r\n\t\t\t<ListGroup> {moviesLoading ? (<p> Movies are loading... </p>) : ( moviesError ? (<p> Sorry we did not found the movies</p>) : (\r\n\t\t\t\t<TransitionGroup className=\"movies-list\">\r\n\t\t\t\t\t{movies.map(({id, desc}) => (\r\n\t\t\t\t\t\t<CSSTransition key={id} timeout={500} classNames=\"fade\">\r\n\t\t\t\t\t\t\t<ListGroupItem className=\"list\">\r\n\t\t\t\t\t\t\t\t{desc}\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tclassName={'remove-btn'+id}\r\n\t\t\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\t\t\tsize=\"sm\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tdispatch(ActionDelMovie(id));\r\n\t\t\t\t\t\t\t\t\t\tdelService(id);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tX\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t</CSSTransition>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</TransitionGroup>))}\r\n\t\t\t</ListGroup>\r\n\t\t</Container>\r\n\t</div>\r\n\t);\r\n};\r\n\r\nexport default ServicesList;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport MyNavbar from \"./components/Navbar\";\n\nimport ServicesList from \"./components/Lists\";\nimport { DataContext } from \"./context/GlobalContext\";\nimport \"./App.css\";\n\nconst App = () => {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DataContext>\n\t\t\t\t<MyNavbar> </MyNavbar>\n\t\t\t\t<h1> Sharing the Love of Coding </h1>\n\n\t\t\t\t<ServicesList> </ServicesList>\n\t\t\t</DataContext>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport {moviesReducer} from './reducers/moviesReducer';\n\nconst globalStore = createStore(\n\n\tmoviesReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    \n);\n\nReactDOM.render(\n\n\t<Provider store={globalStore}>\n\t\t<App />\n\t</Provider>,\n\n    document.getElementById(\"root\")\n    \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}