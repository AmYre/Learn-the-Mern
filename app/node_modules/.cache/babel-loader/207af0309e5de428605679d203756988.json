{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\AmYre\\\\Desktop\\\\mern\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\AmYre\\\\Desktop\\\\mern\\\\app\\\\src\\\\context\\\\GlobalContext.js\";\nimport React, { useState, useEffect, createContext } from \"react\";\nimport axios from 'axios';\nexport const GlobalContext = createContext();\nexport const DataContext = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        services = _useState2[0],\n        setServices = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isError = _useState6[0],\n        setIsError = _useState6[1];\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/posts').then(response => {\n      setServices(response.data);\n      setIsLoading(false);\n    }).catch(err => setIsError(true));\n  }, []);\n  return React.createElement(GlobalContext.Provider, {\n    value: [services, setServices, isLoading, isError],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, props.children);\n};","map":{"version":3,"sources":["C:/Users/AmYre/Desktop/mern/app/src/context/GlobalContext.js"],"names":["React","useState","useEffect","createContext","axios","GlobalContext","DataContext","props","services","setServices","isLoading","setIsLoading","isError","setIsError","get","then","response","data","catch","err","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,aAAa,GAAGF,aAAa,EAAnC;AAEP,OAAO,MAAMG,WAAW,GAAGC,KAAK,IAAI;AAAA,oBACHN,QAAQ,CAAC,EAAD,CADL;AAAA;AAAA,QAC5BO,QAD4B;AAAA,QAClBC,WADkB;;AAAA,qBAEDR,QAAQ,CAAC,IAAD,CAFP;AAAA;AAAA,QAE5BS,SAF4B;AAAA,QAEjBC,YAFiB;;AAAA,qBAGLV,QAAQ,CAAC,KAAD,CAHH;AAAA;AAAA,QAG5BW,OAH4B;AAAA,QAGnBC,UAHmB;;AAKnCX,EAAAA,SAAS,CAAE,MAAM;AAChBE,IAAAA,KAAK,CAACU,GAAN,CAAU,6BAAV,EACEC,IADF,CACQC,QAAQ,IAAI;AAACP,MAAAA,WAAW,CAACO,QAAQ,CAACC,IAAV,CAAX;AAA2BN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAAoB,KADpE,EAEEO,KAFF,CAEQC,GAAG,IAAIN,UAAU,CAAC,IAAD,CAFzB;AAGA,GAJQ,EAIN,EAJM,CAAT;AAOA,SAEC,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE,CAACL,QAAD,EAAWC,WAAX,EAAwBC,SAAxB,EAAmCE,OAAnC,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEL,KAAK,CAACa,QADR,CAFD;AAOA,CAnBM","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\r\nimport axios from 'axios';\r\n\r\nexport const GlobalContext = createContext()\r\n\r\nexport const DataContext = props => {\r\n\tconst [services, setServices] = useState([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [isError, setIsError] = useState(false);\r\n\r\n\tuseEffect( () => {\r\n\t\taxios.get('http://localhost:5000/posts')\r\n\t\t\t.then( response => {setServices(response.data);setIsLoading(false)} )\r\n\t\t\t.catch(err => setIsError(true))\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\r\n\t\t<GlobalContext.Provider value={[services, setServices, isLoading, isError]}>\r\n\t\t\t{props.children}\r\n\t\t</GlobalContext.Provider>\r\n\r\n\t)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}